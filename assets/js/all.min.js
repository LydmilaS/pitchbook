!function(n){"use strict";n.fn.mySlider=function(t){function i(n){l.auto&&(s=setInterval(r.bind(this,n,"right"),l.speed))}function o(t){var o=t.next();o.find(".arrow-left").on("click",r.bind(this,t,"left")),o.find(".arrow-right").on("click",r.bind(this,t,"right")),t.closest(".slider-wrap").on("mouseenter",function(){l.pauseOnHover&&clearInterval(s)}).on("mouseleave",function(){i(t)}),t.on("touchstart",function(n){c=n.touches[0].clientX}).on("touchend",function(t){var i=t.changedTouches[0].clientX,o=i-c;o>70?r(n(this),"left"):o<70&&r(n(this),"right")})}function e(t){t.wrap("<div class='slider-wrap'></div>"),n(".slider-wrap").wrap("<div class='slider-container'></div>"),n('<div class="slider-nav"><button class="arrow-left"></button><button class="arrow-right"></button></div>').appendTo(".slider-wrap"),a(t),o(t)}function a(t){for(var i=n(document.createDocumentFragment()),o=n(document.createDocumentFragment()),e=t.find(".slide").outerWidth(!0),a=0;a<l.count;a++){var r=n(t.children()[a]).clone(!0);i.append(r)}for(var s=t.children().length-l.count;s<t.children().length;s++){var c=n(t.children()[s]).clone(!0);o.append(c)}i.appendTo(t),o.prependTo(t),t.css({transform:"translate3D("+e*d+"px, 0 ,0)",transition:"initial"})}function r(n,t,i){var o=n.find(".slide").outerWidth(!0);"left"===t?d+=1:d-=1,n.css({transform:"translate3D("+o*d+"px, 0 ,0)",transition:l.transition+"ms"}),n.children().length+d===l.count?setTimeout(function(){d=-l.count,n.css({transform:"translate3D("+o*d+"px, 0 ,0)",transition:"initial"})},l.transition):0===d&&setTimeout(function(){d=-n.children().length+2*l.count,n.css({transform:"translate3D("+o*d+"px, 0 ,0)",transition:"initial"})},l.transition)}var s,c,l={transition:1e3,count:3,speed:2e3,auto:!0,pauseOnHover:!0},d=-l.count;return this.each(function(){var o=n(this);t&&n.extend(l,t),e(o),i(o),n(window).resize(function(){var n=o.find(".slide").outerWidth(!0);o.css({transform:"translate3D("+n*d+"px, 0 ,0)",transition:"initial"})})})}}(jQuery),$(document).ready(function(){function n(n,t){n.removeClass("active"),t.addClass("active")}$(".top-navbar-toggler").on("click",function(){$(".navigation").toggleClass("menu-open")}),$(".slider").mySlider(),$(".parallax-one").myParallax(),$(".tabs-button a").on("click",function(t){t.preventDefault();var i=$(this).attr("data-tab");n($(".tabs-button a"),$(this)),n($(".active-tab-content > div"),$("div#"+i))}),"ontouchstart"in window&&$("body").addClass("touch-device"),$(".top-link").on("mouseenter",function(){$(window).width()>1023&&$(this).closest("li").addClass("dropdownShow")}).on("click",function(n){n.preventDefault()}),$(".navigation li").on("mouseleave",function(){$(this).removeClass("dropdownShow")}),$(".top-link").on("click",function(){$(window).width()<1024&&($(".top-link").not(this).closest("li").removeClass("dropdownShow"),$(this).closest("li").toggleClass("dropdownShow"))})}),function(n){"use strict";n.fn.myParallax=function(){return this.each(function(){function t(){var t=n(window).scrollTop()-i.offset().top+i.height();i.css({"background-attachment":"fixed"}),n(window).width()>767?i.find("div").css({transform:"translate(0px, "+t/3+"px)"}):i.find("div").css({transform:"none"})}var i=n(this);n(window).on("scroll",function(){t()})})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
